//! Bindings to the cycles_depositor canister, generated by ./scripts/bind/pic/cycles_depositor.sh
#![allow(dead_code, unused_imports)]
use std::sync::Arc;

use candid::{self, CandidType, Deserialize, Principal};
use pocket_ic::PocketIc;

use crate::utils::pic_canister::{PicCanister, PicCanisterTrait};

{{type_defs}}


{{#if methods}}
pub struct {{PascalCase canister_name}}Pic {
    pub pic: Arc<PocketIc>,
    pub canister_id: Principal,
}

impl From<PicCanister> for {{PascalCase canister_name}}Pic {
    fn from(pic: PicCanister) -> Self {
        Self {
            pic: pic.pic(),
            canister_id: pic.canister_id(),
        }
    }
}

impl PicCanisterTrait for {{PascalCase canister_name}}Pic {
    /// The shared PocketIc instance.
    fn pic(&self) -> Arc<PocketIc> {
        self.pic.clone()
    }
    /// The ID of this canister.
    fn canister_id(&self) -> Principal {
        self.canister_id.clone()
    }
}

impl {{PascalCase canister_name}}Pic {
  {{#each methods}}
  pub fn {{this.name}}(&self, _caller: Principal{{#each this.args}}, {{this.0}}: &{{this.1}}{{/each}}) -> Result<{{vec_to_arity this.rets}}, String> {
      self.update(self.canister_id, "{{escape_debug this.original_name}}", arg0)
  }
  {{/each}}
}
{{#if canister_id}}
pub const CANISTER_ID : Principal = Principal::from_slice(&[{{principal_slice canister_id}}]); // {{canister_id}}
{{/if}}
{{/if}}
{{#if tests}}
{{tests}}
{{/if}}
