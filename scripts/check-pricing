#!/usr/bin/env bash
set -euo pipefail

print_help() {
  cat <<-EOF
	Checks that API pricing covers cycle costs.

	For each API method, this:
	* Gets the signer canister cycles balance
	* Makes a sample API call
	* Gets the cycles balance again
	* Reports on the difference.

	Note: Measurement is affected by other API calls made to the network.

	Usage: "$(basename "$0")" [network] [method_name_pattern]
	where:
	  'network' is a dfx network name.
	     Default: ic
	  'method_name_pattern' is a regular expression; only API methods
	     matching the pattern will be tested.
	     Default: All methods.
	Example:
	  "$(basename "$0")" ic btc
	     will check pricing for all bitcoin methods.
	EOF
}

[[ "${1:-}" != "--help" ]] || {
  print_help
  exit 0
}

DFX_NETWORK="${1:-ic}"
METHOD_NAME_PATTERN="${2:-.}"
SIGNER_CANISTER_ID="$(dfx canister id --network "$DFX_NETWORK" signer)"
LOG_FILE="check-pricing.${DFX_NETWORK}.$(date --iso-8601=second).jsonl"

to_number() {
  : Converts symbols such as 1K to 1_000
  numfmt --from=si | rev | sed 's/.../&_/g' | rev
}
signer_balance() {
  dfx canister status --network "$DFX_NETWORK" signer | awk '($1 == "Balance:"){print $2}'
}
add_underscores_to_number() {
  rev | sed -E 's/.../&_/g;s/_(-?)$/\1/g' | rev
}
remove_underscores() {
  tr -d _
}
check_call_pricing() {
  local before after method_name
  echo "$1" | grep -qE "$METHOD_NAME_PATTERN" || {
    echo "Skipping $1..."
    return
  }
  method_name="$1"
  before="$(signer_balance)"
  dfx canister call --network "$DFX_NETWORK" signer "${@}" >/dev/null
  after="$(signer_balance)"
  diff="$(echo "$after - $before" | remove_underscores | bc | add_underscores_to_number)"
  if [[ $diff = -* ]]; then
    echo "WARNING: signer balance fell by $diff for: $1"
  else
    echo "OK: Signer balance rose by $diff for: $1"
  fi
  (
    export before after diff method_name
    jq --null-input '{
      method_name: $ENV.method_name,
      cycles_balance_before: ($ENV.before | gsub("_";"") | tonumber),
      cycles_balance_after: ($ENV.after | gsub("_";"") | tonumber),
      diff: ($ENV.diff | gsub("_";"") | tonumber)
    }' >> "$LOG_FILE"
  )
}

APPROVAL="1P"

: Approve funds for use in the test
dfx canister call cycles_ledger icrc2_approve --network "$DFX_NETWORK" "
  record {
    amount = $(echo "$APPROVAL" | to_number);
    spender = record {
      owner = principal \"${SIGNER_CANISTER_ID}\";
    };
  }" >/dev/null

: Check that each method is making a profit

check_call_pricing schnorr_public_key '
(
  record {
    key_id = record { algorithm = variant { ed25519 }; name = "key_1" };
    canister_id = null;
    derivation_path = vec { blob "jhskgjdsfhgkljhsdfkglhsdkflghjs" };
  },
  opt variant { CallerPaysIcrc2Cycles },
)
'

check_call_pricing schnorr_sign '
(
  record {
    key_id = record { algorithm = variant { ed25519 }; name = "key_1" };
    derivation_path = vec { blob "dfsgsdgf"; blob "dsfgdsfg"; blob "dsfgdsfg" };
    message = blob "Your cycles or your knife!";
  },
  opt variant { CallerPaysIcrc2Cycles },
)
'

check_call_pricing btc_caller_address '
(
  record { network = variant { mainnet }; address_type = variant { P2WPKH } },
  opt variant { CallerPaysIcrc2Cycles },
)
'
check_call_pricing btc_caller_balance '

(
  record { network = variant { mainnet }; address_type = variant { P2WPKH } },
  opt variant { CallerPaysIcrc2Cycles },
)
'
check_call_pricing btc_caller_send '
(
  record {
    fee_satoshis = null;
    network = variant { mainnet };
    utxos_to_spend = vec {
      record {
        height = 9_876_543 : nat32;
        value = 12_345_667_890 : nat64;
        outpoint = record { txid = blob "\36\f3\a7\fc\b6\b5\eb\d9\fa\40\41\92\8d\a8\9c\d4\23\66\2f\9c\5c\12\e4\1c\80\e0\7a\65\59\d1\78\ef"; vout = 12_345_678 : nat32 };
      };
      record {
        height = 9_876_543 : nat32;
        value = 12_345_667_890 : nat64;
        outpoint = record { txid = blob "\d3\f7\1b\58\d5\39\fd\97\d2\12\2f\11\2d\52\da\db\6a\47\9a\d3\c4\74\64\97\8b\3b\0c\e0\04\6c\1b\50"; vout = 12_345_678 : nat32 };
      };
      record {
        height = 9_876_543 : nat32;
        value = 12_345_667_890 : nat64;
        outpoint = record { txid = blob "\62\79\11\13\aa\4b\f3\39\e7\2a\fc\a3\7c\99\96\0e\0e\29\24\09\16\b6\5e\2b\24\5a\8a\7b\9e\ff\cd\eb"; vout = 12_345_678 : nat32 };
      };
    };
    address_type = variant { P2WPKH };
    outputs = vec {
      record {
        destination_address = "bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh";
        sent_satoshis = 23_456_789 : nat64;
      };
    };
  },
  opt variant { CallerPaysIcrc2Cycles },
)
'
check_call_pricing eth_address '
(
  record {},
  opt variant { CallerPaysIcrc2Cycles },
)
'
check_call_pricing eth_personal_sign '
(
  record { message = "1234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234" },
  opt variant { CallerPaysIcrc2Cycles },
)
'
check_call_pricing eth_sign_prehash '(record { hash = "0123456701234567012345670123456701234567012345670123456701234567" }, opt variant { CallerPaysIcrc2Cycles })'
check_call_pricing eth_sign_transaction '
(
  record {
    to = "0x5e9F1cAF942aa8Ee887B75f5A6bCCaf4B1024248";
    gas = 999 : nat;
    value = 3 : nat;
    max_priority_fee_per_gas = 23_645_624_464 : nat;
    data = opt "0x02f86783aa36a7808203158201c87b945e9f1caf942aa8ee887b75f5a6bccaf4b10242480180c080a02fc93932ea116781baffa2f5e62079772c2d6ed91219caff433f653a6e657460a0301f525ac8a55602cc4bddb8c714c2be08aa2bf43fb0ddad974aa4f589d505b9";
    max_fee_per_gas = 888 : nat;
    chain_id = 4 : nat;
    nonce = 6 : nat;
  },
  opt variant { CallerPaysIcrc2Cycles },
)
'
check_call_pricing generic_caller_ecdsa_public_key '
(
  record {
    key_id = record { name = "key_1"; curve = variant { secp256k1 } };
    canister_id = null;
    derivation_path = vec { blob "foo"; blob "bar"; blob "bat" };
  },
  opt variant { CallerPaysIcrc2Cycles },
)
'
check_call_pricing generic_sign_with_ecdsa '
(
  opt variant { CallerPaysIcrc2Cycles },
  record {
    key_id = record { name = "key_1"; curve = variant { secp256k1 } };
    derivation_path = vec { blob "foo"; blob "bar"; blob "bat" };
    message_hash = blob "\41\40\f0\a8\8b\3e\ea\41\5c\d2\77\4f\c2\70\f1\6b\51\2c\7c\63\7e\9b\54\2a\31\35\96\8b\ac\b1\47\ae";
  },
)
'
