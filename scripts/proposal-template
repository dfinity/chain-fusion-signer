#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
PATH="$SOURCE_DIR:$PATH"

print_help() {
  cat <<-EOF
	Creates the default proposal text.

	# Prerequisites
	- The desired release has been created and published.
	- Release notes have been written in GitHub
	EOF
}

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
clap.define short=n long=network desc="The dfx network to use" variable=DFX_NETWORK default="ic"
clap.define short=t long=tag desc="The release candidate tag" variable=RELEASE_CANDIDATE_TAG
clap.define short=p long=prod desc="The production ref" variable=PROD_REF
# Source the output file ----------------------------------------------------------
source "$(clap.build)"
cd "$SOURCE_DIR/.."
export DFX_NETWORK

# If the currently deployed git ref is not specified, get it from the canister metadata.
test -n "${PROD_REF:-}" || PROD_REF="$(dfx canister metadata signer git_commit_id --network "$DFX_NETWORK" | awk '{print $1}')"

RELEASE_GITHUB_URL="$(gh release view "$RELEASE_CANDIDATE_TAG" --json url -q .url)"
OUTPUT_PROPOSAL="release/PROPOSAL.md"
OUTPUT_ROLLBACK="release/ROLLBACK.md"

WASM="release/ci/signer.wasm.gz"
if test -f "$WASM"; then
  WASM_SHA="$(sha256sum "$WASM" | awk '{print $1}')"
else
  echo "Please populate ${WASM} and run this again."
  exit 0
fi
ARGS_DID="release/ci/signer.args.did"
if test -f "$ARGS_DID"; then
  ARGS_DID_SHA="$(sha256sum "$ARGS_DID" | awk '{print $1}')"
else
  echo "Please populate ${ARGS_DID} and run this again."
  exit 0
fi
ARGS_BIN="release/ci/signer.args.bin"
if test -f "$ARGS_BIN"; then
  ARGS_BIN_SHA="$(sha256sum "$ARGS_BIN" | awk '{print $1}')"
else
  echo "Please populate ${ARGS_BIN} and run this again."
  exit 0
fi

cat <<EOF >"$OUTPUT_PROPOSAL"
# Upgrade Chain Fusion Signer canister to $RELEASE_CANDIDATE_TAG
Commit: \`$(git rev-parse "tags/$RELEASE_CANDIDATE_TAG")\`
Release: \`${RELEASE_GITHUB_URL}\`
Wasm sha256 hash:     \`${WASM_SHA}\`
Candid argument hash: \`${ARGS_DID_SHA}\`
Binary argument hash: \`${ARGS_BIN_SHA}\`

The chain fusion signer is a canister that makes the internet computer threshold signing API available to web applications, off-chain clients and other-chain applications.

## Change Log

$(gh release view "$RELEASE_CANDIDATE_TAG" --json body -q .body | tr -d "\r" | sed -E 's/^#/##/g')

## Commit Log

\`\`\`
+ bash -xc "git log --format='%C(auto) %h %s' $(git rev-parse --short "$PROD_REF")..$(git rev-parse --short "$RELEASE_CANDIDATE_TAG")"
$(bash -c "git log --format='%C(auto) %h %s' $(git rev-parse --short "$PROD_REF")..$(git rev-parse --short "$RELEASE_CANDIDATE_TAG")")
\`\`\`

## Wasm Verification

To build the wasm module yourself and verify its hash, run the following commands from the root of the [Chain Fusion Signer repo](https://github.com/dfinity/chain-fusion-signer):

\`\`\`
git fetch  # to ensure you have the latest changes.
git checkout "$(git rev-parse "$RELEASE_CANDIDATE_TAG")"
./scripts/docker-build
\`\`\`

This will generate these files:
- out/signer.wasm.gz
- out/signer.args.did
- out/signer.args.bin

EOF

cat <<EOF >"$OUTPUT_ROLLBACK"
# Downgrade frontend NNS Dapp canister to commit \`$(git rev-parse "$RELEASE_CANDIDATE_TAG")\`
Wasm sha256 hash: \`${WASM_SHA}\` (\`${WASM}\`)

## Wasm Verification

To build the wasm module yourself and verify its hash, run the following commands from the root of the nns-dapp repo:

\`\`\`
git fetch  # to ensure you have the latest changes.
git checkout "$(git rev-parse "$RELEASE_CANDIDATE_TAG")"
./scripts/docker-build
\`\`\`

This will generate these files:
* out/signer.wasm.gz
* out/signer.args.did
* out/signer.args.bin

EOF

echo Outputs:
for VAR in OUTPUT_PROPOSAL OUTPUT_ROLLBACK; do
  echo "$VAR: ${!VAR}"
done
