type Account = record { owner : principal; subaccount : opt blob };
type Arg = variant { Upgrade; Init : InitArg };
type BitcoinNetwork = variant { mainnet; regtest; testnet };
type CallerPaysIcrc2Tokens = record { ledger : principal };
type CanisterStatusResultV2 = record {
  controller : principal;
  status : CanisterStatusType;
  freezing_threshold : nat;
  balance : vec record { blob; nat };
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettingsArgs;
  idle_cycles_burned_per_day : nat;
  module_hash : opt blob;
};
type CanisterStatusType = variant { stopped; stopping; running };
type Config = record {
  ecdsa_key_name : text;
  ic_root_key_raw : opt blob;
  cycles_ledger : principal;
};
type DefiniteCanisterSettingsArgs = record {
  controller : principal;
  freezing_threshold : nat;
  controllers : vec principal;
  memory_allocation : nat;
  compute_allocation : nat;
};
type EcdsaCurve = variant { secp256k1 };
type EcdsaKeyId = record { name : text; curve : EcdsaCurve };
type EcdsaPublicKeyArgument = record {
  key_id : EcdsaKeyId;
  canister_id : opt principal;
  derivation_path : vec blob;
};
type EcdsaPublicKeyResponse = record { public_key : blob; chain_code : blob };
type GenericSigningError = variant {
  SigningError : record { RejectionCode; text };
  PaymentError : PaymentError;
};
type HttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  status_code : nat16;
};
type InitArg = record {
  ecdsa_key_name : text;
  ic_root_key_der : opt blob;
  cycles_ledger : opt principal;
};
type PatronPaysIcrc2Tokens = record { ledger : principal; patron : Account };
type PaymentError = variant {
  LedgerUnreachable : CallerPaysIcrc2Tokens;
  UnsupportedPaymentType;
  LedgerError : record { error : WithdrawFromError; ledger : principal };
  InsufficientFunds : record { needed : nat64; available : nat64 };
};
type PaymentType = variant {
  PatronPaysIcrc2Tokens : PatronPaysIcrc2Tokens;
  AttachedCycles;
  CallerPaysIcrc2Cycles;
  CallerPaysIcrc2Tokens : CallerPaysIcrc2Tokens;
  PatronPaysIcrc2Cycles : Account;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok : text; Err : GenericSigningError };
type Result_1 = variant { Ok : nat64; Err : GenericSigningError };
type Result_2 = variant {
  Ok : record { EcdsaPublicKeyResponse };
  Err : GenericSigningError;
};
type Result_3 = variant {
  Ok : record { SignWithEcdsaResponse };
  Err : GenericSigningError;
};
type SignRequest = record {
  to : text;
  gas : nat;
  value : nat;
  max_priority_fee_per_gas : nat;
  data : opt text;
  max_fee_per_gas : nat;
  chain_id : nat;
  nonce : nat;
};
type SignWithEcdsaArgument = record {
  key_id : EcdsaKeyId;
  derivation_path : vec blob;
  message_hash : blob;
};
type SignWithEcdsaResponse = record { signature : blob };
type WithdrawFromError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  InsufficientAllowance : record { allowance : nat };
  Duplicate : record { duplicate_of : nat };
  InvalidReceiver : record { receiver : principal };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  FailedToWithdrawFrom : record {
    withdraw_from_block : opt nat;
    rejection_code : RejectionCode;
    refund_block : opt nat;
    approval_refund_block : opt nat;
    rejection_reason : text;
  };
  InsufficientFunds : record { balance : nat };
};
service : (Arg) -> {
  btc_caller_address : (BitcoinNetwork, opt PaymentType) -> (Result);
  btc_caller_balance : (BitcoinNetwork, opt PaymentType) -> (Result_1);
  caller_btc_address : (BitcoinNetwork) -> (text);
  caller_btc_balance : (BitcoinNetwork) -> (nat64);
  caller_eth_address : () -> (text);
  config : () -> (Config) query;
  eth_address_of : (principal) -> (text);
  eth_address_of_caller : (opt PaymentType) -> (Result);
  eth_address_of_principal : (principal, opt PaymentType) -> (Result);
  eth_personal_sign : (text, opt PaymentType) -> (Result);
  eth_sign_transaction : (SignRequest, opt PaymentType) -> (Result);
  generic_caller_ecdsa_public_key : (
      EcdsaPublicKeyArgument,
      opt PaymentType,
    ) -> (Result_2);
  generic_sign_with_ecdsa : (opt PaymentType, SignWithEcdsaArgument) -> (
      Result_3,
    );
  get_canister_status : () -> (CanisterStatusResultV2);
  http_request : (HttpRequest) -> (HttpResponse) query;
  personal_sign : (text) -> (text);
  sign_prehash : (text) -> (text);
  sign_transaction : (SignRequest) -> (text);
}
